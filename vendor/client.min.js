var oms=function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=127)}([function(t,e,r){var n=r(30),o="object"==typeof self&&self&&self.Object===Object&&self,i=n||o||Function("return this")();t.exports=i},function(t,e,r){var n;!function(e,o){var i={};!function(t){"use strict";t.__esModule=!0,t.digestLength=32,t.blockSize=64;var e=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);function r(t,r,n,o,i){for(var s,a,u,c,f,h,l,p,d,y,v,g,b;i>=64;){for(s=r[0],a=r[1],u=r[2],c=r[3],f=r[4],h=r[5],l=r[6],p=r[7],y=0;y<16;y++)v=o+4*y,t[y]=(255&n[v])<<24|(255&n[v+1])<<16|(255&n[v+2])<<8|255&n[v+3];for(y=16;y<64;y++)g=((d=t[y-2])>>>17|d<<15)^(d>>>19|d<<13)^d>>>10,b=((d=t[y-15])>>>7|d<<25)^(d>>>18|d<<14)^d>>>3,t[y]=(g+t[y-7]|0)+(b+t[y-16]|0);for(y=0;y<64;y++)g=(((f>>>6|f<<26)^(f>>>11|f<<21)^(f>>>25|f<<7))+(f&h^~f&l)|0)+(p+(e[y]+t[y]|0)|0)|0,b=((s>>>2|s<<30)^(s>>>13|s<<19)^(s>>>22|s<<10))+(s&a^s&u^a&u)|0,p=l,l=h,h=f,f=c+g|0,c=u,u=a,a=s,s=g+b|0;r[0]+=s,r[1]+=a,r[2]+=u,r[3]+=c,r[4]+=f,r[5]+=h,r[6]+=l,r[7]+=p,o+=64,i-=64}return o}var n=function(){function e(){this.digestLength=t.digestLength,this.blockSize=t.blockSize,this.state=new Int32Array(8),this.temp=new Int32Array(64),this.buffer=new Uint8Array(128),this.bufferLength=0,this.bytesHashed=0,this.finished=!1,this.reset()}return e.prototype.reset=function(){return this.state[0]=1779033703,this.state[1]=3144134277,this.state[2]=1013904242,this.state[3]=2773480762,this.state[4]=1359893119,this.state[5]=2600822924,this.state[6]=528734635,this.state[7]=1541459225,this.bufferLength=0,this.bytesHashed=0,this.finished=!1,this},e.prototype.clean=function(){for(var t=0;t<this.buffer.length;t++)this.buffer[t]=0;for(t=0;t<this.temp.length;t++)this.temp[t]=0;this.reset()},e.prototype.update=function(t,e){if(void 0===e&&(e=t.length),this.finished)throw new Error("SHA256: can't update because hash was finished.");var n=0;if(this.bytesHashed+=e,this.bufferLength>0){for(;this.bufferLength<64&&e>0;)this.buffer[this.bufferLength++]=t[n++],e--;64===this.bufferLength&&(r(this.temp,this.state,this.buffer,0,64),this.bufferLength=0)}for(e>=64&&(n=r(this.temp,this.state,t,n,e),e%=64);e>0;)this.buffer[this.bufferLength++]=t[n++],e--;return this},e.prototype.finish=function(t){if(!this.finished){var e=this.bytesHashed,n=this.bufferLength,o=e/536870912|0,i=e<<3,s=e%64<56?64:128;this.buffer[n]=128;for(var a=n+1;a<s-8;a++)this.buffer[a]=0;this.buffer[s-8]=o>>>24&255,this.buffer[s-7]=o>>>16&255,this.buffer[s-6]=o>>>8&255,this.buffer[s-5]=o>>>0&255,this.buffer[s-4]=i>>>24&255,this.buffer[s-3]=i>>>16&255,this.buffer[s-2]=i>>>8&255,this.buffer[s-1]=i>>>0&255,r(this.temp,this.state,this.buffer,0,s),this.finished=!0}for(a=0;a<8;a++)t[4*a+0]=this.state[a]>>>24&255,t[4*a+1]=this.state[a]>>>16&255,t[4*a+2]=this.state[a]>>>8&255,t[4*a+3]=this.state[a]>>>0&255;return this},e.prototype.digest=function(){var t=new Uint8Array(this.digestLength);return this.finish(t),t},e.prototype._saveState=function(t){for(var e=0;e<this.state.length;e++)t[e]=this.state[e]},e.prototype._restoreState=function(t,e){for(var r=0;r<this.state.length;r++)this.state[r]=t[r];this.bytesHashed=e,this.finished=!1,this.bufferLength=0},e}();t.Hash=n;var o=function(){function t(t){this.inner=new n,this.outer=new n,this.blockSize=this.inner.blockSize,this.digestLength=this.inner.digestLength;var e=new Uint8Array(this.blockSize);if(t.length>this.blockSize)(new n).update(t).finish(e).clean();else for(var r=0;r<t.length;r++)e[r]=t[r];for(r=0;r<e.length;r++)e[r]^=54;this.inner.update(e);for(r=0;r<e.length;r++)e[r]^=106;this.outer.update(e),this.istate=new Uint32Array(8),this.ostate=new Uint32Array(8),this.inner._saveState(this.istate),this.outer._saveState(this.ostate);for(r=0;r<e.length;r++)e[r]=0}return t.prototype.reset=function(){return this.inner._restoreState(this.istate,this.inner.blockSize),this.outer._restoreState(this.ostate,this.outer.blockSize),this},t.prototype.clean=function(){for(var t=0;t<this.istate.length;t++)this.ostate[t]=this.istate[t]=0;this.inner.clean(),this.outer.clean()},t.prototype.update=function(t){return this.inner.update(t),this},t.prototype.finish=function(t){return this.outer.finished?this.outer.finish(t):(this.inner.finish(t),this.outer.update(t,this.digestLength).finish(t)),this},t.prototype.digest=function(){var t=new Uint8Array(this.digestLength);return this.finish(t),t},t}();function i(t){var e=(new n).update(t),r=e.digest();return e.clean(),r}function s(t,e){var r=new o(t).update(e),n=r.digest();return r.clean(),n}function a(t,e,r,n){var o=n[0];if(0===o)throw new Error("hkdf: cannot expand more");e.reset(),o>1&&e.update(t),r&&e.update(r),e.update(n),e.finish(t),n[0]++}t.HMAC=o,t.hash=i,t.default=i,t.hmac=s;var u=new Uint8Array(t.digestLength);t.hkdf=function(t,e,r,n){void 0===e&&(e=u),void 0===n&&(n=32);for(var i=new Uint8Array([1]),c=s(e,t),f=new o(c),h=new Uint8Array(f.digestLength),l=h.length,p=new Uint8Array(n),d=0;d<n;d++)l===h.length&&(a(h,f,r,i),l=0),p[d]=h[l++];return f.clean(),h.fill(0),i.fill(0),p},t.pbkdf2=function(t,e,r,n){for(var i=new o(t),s=i.digestLength,a=new Uint8Array(4),u=new Uint8Array(s),c=new Uint8Array(s),f=new Uint8Array(n),h=0;h*s<n;h++){var l=h+1;a[0]=l>>>24&255,a[1]=l>>>16&255,a[2]=l>>>8&255,a[3]=l>>>0&255,i.reset(),i.update(e),i.update(a),i.finish(c);for(var p=0;p<s;p++)u[p]=c[p];for(p=2;p<=r;p++){i.reset(),i.update(c).finish(c);for(var d=0;d<s;d++)u[d]^=c[d]}for(p=0;p<s&&h*s+p<n;p++)f[h*s+p]=u[p]}for(h=0;h<s;h++)u[h]=c[h]=0;for(h=0;h<4;h++)a[h]=0;return i.clean(),f}}(i);var s=i.default;for(var a in i)s[a]=i[a];"object"==typeof t.exports?t.exports=s:void 0===(n=function(){return s}.call(i,r,i,t))||(t.exports=n)}()},function(t,e,r){var n=r(61),o=r(66);t.exports=function(t,e){var r=o(t,e);return n(r)?r:void 0}},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,r){var n=r(49);t.exports=function(t){return n(t,5)}},function(t,e,r){var n=r(51),o=r(52),i=r(53),s=r(54),a=r(55);function u(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=s,u.prototype.set=a,t.exports=u},function(t,e,r){var n=r(28);t.exports=function(t,e){for(var r=t.length;r--;)if(n(t[r][0],e))return r;return-1}},function(t,e,r){var n=r(18),o=r(62),i=r(63),s=n?n.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":s&&s in Object(t)?o(t):i(t)}},function(t,e,r){var n=r(2)(Object,"create");t.exports=n},function(t,e,r){var n=r(76);t.exports=function(t,e){var r=t.__data__;return n(e)?r["string"==typeof e?"string":"hash"]:r.map}},function(t,e,r){var n=r(33),o=r(34);t.exports=function(t,e,r,i){var s=!r;r||(r={});for(var a=-1,u=e.length;++a<u;){var c=e[a],f=i?i(r[c],t[c],c,r,t):void 0;void 0===f&&(f=t[c]),s?o(r,c,f):n(r,c,f)}return r}},function(t,e){var r=Array.isArray;t.exports=r},function(t,e){var r=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||r)}},function(t,e,r){var n=r(99),o=r(17),i=r(100),s=r(101),a=r(102),u=r(8),c=r(32),f=c(n),h=c(o),l=c(i),p=c(s),d=c(a),y=u;(n&&"[object DataView]"!=y(new n(new ArrayBuffer(1)))||o&&"[object Map]"!=y(new o)||i&&"[object Promise]"!=y(i.resolve())||s&&"[object Set]"!=y(new s)||a&&"[object WeakMap]"!=y(new a))&&(y=function(t){var e=u(t),r="[object Object]"==e?t.constructor:void 0,n=r?c(r):"";if(n)switch(n){case f:return"[object DataView]";case h:return"[object Map]";case l:return"[object Promise]";case p:return"[object Set]";case d:return"[object WeakMap]"}return e}),t.exports=y},function(t,e,r){var n=r(39),o=r(14),i=r(36),s=r(12),a=r(24),u=r(20),c=r(13),f=r(37),h=Object.prototype.hasOwnProperty;t.exports=function(t){if(null==t)return!0;if(a(t)&&(s(t)||"string"==typeof t||"function"==typeof t.splice||u(t)||f(t)||i(t)))return!t.length;var e=o(t);if("[object Map]"==e||"[object Set]"==e)return!t.size;if(c(t))return!n(t).length;for(var r in t)if(h.call(t,r))return!1;return!0}},function(t,e,r){"use strict";const{v4:n,v6:o}=r(125),i=n({exact:!0}),s=o({exact:!0});t.exports=t=>i.test(t)?4:s.test(t)?6:0,t.exports.v4=t=>i.test(t),t.exports.v6=t=>s.test(t)},function(t,e,r){var n=r(2)(r(0),"Map");t.exports=n},function(t,e,r){var n=r(0).Symbol;t.exports=n},function(t,e,r){var n=r(35),o=r(39),i=r(24);t.exports=function(t){return i(t)?n(t):o(t)}},function(t,e,r){(function(t){var n=r(0),o=r(85),i=e&&!e.nodeType&&e,s=i&&"object"==typeof t&&t&&!t.nodeType&&t,a=s&&s.exports===i?n.Buffer:void 0,u=(a?a.isBuffer:void 0)||o;t.exports=u}).call(this,r(21)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e,r){(function(t){var n=r(30),o=e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,s=i&&i.exports===o&&n.process,a=function(){try{var t=i&&i.require&&i.require("util").types;return t||s&&s.binding&&s.binding("util")}catch(t){}}();t.exports=a}).call(this,r(21)(t))},function(t,e,r){var n=r(29),o=r(38);t.exports=function(t){return null!=t&&o(t.length)&&!n(t)}},function(t,e,r){var n=r(35),o=r(90),i=r(24);t.exports=function(t){return i(t)?n(t,!0):o(t)}},function(t,e,r){var n=r(95),o=r(41),i=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,a=s?function(t){return null==t?[]:(t=Object(t),n(s(t),(function(e){return i.call(t,e)})))}:o;t.exports=a},function(t,e,r){var n=r(105);t.exports=function(t){var e=new t.constructor(t.byteLength);return new n(e).set(new n(t)),e}},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,r){var n=r(8),o=r(3);t.exports=function(t){if(!o(t))return!1;var e=n(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(t,e,r){(function(e){var r="object"==typeof e&&e&&e.Object===Object&&e;t.exports=r}).call(this,r(31))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e){var r=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return r.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,r){var n=r(34),o=r(28),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,r){var s=t[e];i.call(t,e)&&o(s,r)&&(void 0!==r||e in t)||n(t,e,r)}},function(t,e,r){var n=r(81);t.exports=function(t,e,r){"__proto__"==e&&n?n(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r}},function(t,e,r){var n=r(83),o=r(36),i=r(12),s=r(20),a=r(86),u=r(37),c=Object.prototype.hasOwnProperty;t.exports=function(t,e){var r=i(t),f=!r&&o(t),h=!r&&!f&&s(t),l=!r&&!f&&!h&&u(t),p=r||f||h||l,d=p?n(t.length,String):[],y=d.length;for(var v in t)!e&&!c.call(t,v)||p&&("length"==v||h&&("offset"==v||"parent"==v)||l&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||a(v,y))||d.push(v);return d}},function(t,e,r){var n=r(84),o=r(4),i=Object.prototype,s=i.hasOwnProperty,a=i.propertyIsEnumerable,u=n(function(){return arguments}())?n:function(t){return o(t)&&s.call(t,"callee")&&!a.call(t,"callee")};t.exports=u},function(t,e,r){var n=r(87),o=r(22),i=r(23),s=i&&i.isTypedArray,a=s?o(s):n;t.exports=a},function(t,e){t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},function(t,e,r){var n=r(13),o=r(88),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!n(t))return o(t);var e=[];for(var r in Object(t))i.call(t,r)&&"constructor"!=r&&e.push(r);return e}},function(t,e){t.exports=function(t,e){return function(r){return t(e(r))}}},function(t,e){t.exports=function(){return[]}},function(t,e,r){var n=r(43),o=r(44),i=r(26),s=r(41),a=Object.getOwnPropertySymbols?function(t){for(var e=[];t;)n(e,i(t)),t=o(t);return e}:s;t.exports=a},function(t,e){t.exports=function(t,e){for(var r=-1,n=e.length,o=t.length;++r<n;)t[o+r]=e[r];return t}},function(t,e,r){var n=r(40)(Object.getPrototypeOf,Object);t.exports=n},function(t,e,r){var n=r(43),o=r(12);t.exports=function(t,e,r){var i=e(t);return o(t)?i:n(i,r(t))}},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return a}));var n=r(1),o=r.n(n);const i=/-|:|\..{3}/g,s=new TextEncoder;function a(e,r,a=new Date,u=""){let c=a.toISOString().replace(i,"");c||(c=(new Date).toISOString().replace(i,""));const f=new Headers(r.headers);f.set("Host",r.url.host),f.append("X-Sdk-Date",c);const h=function(t){const e=[];return t.forEach((t,r)=>{e.push(`${r.toLowerCase()}:${t}`)}),e.sort()}(f),l=function(t){let e="";for(const r of t)e+=r.split(":")[0]+";";return e.slice(0,-1)}(h),{queryString:p,yyyymmdd:d}=function(t){const e=t.isoDate.slice(0,8);let r="SDK-HMAC-SHA256";return r+=` Credential=${t.accessKeyId}/${e}/${t.regionName}/${t.serviceName}/sdk_request,`,r+=` SignedHeaders=${t.signedHeaders},`,{queryString:r,yyyymmdd:e}}({accessKeyId:e.accessKeyId,regionName:e.regionName,signedHeaders:l,serviceName:r.serviceName,isoDate:c}),{canonicalRequest:y,additionalQueryString:v}=function(e){const r=o()(s.encode(e.body));e.url.pathname||(e.url.pathname="/");e.url.pathname.endsWith("/")||(e.url.pathname+="/");e.url.pathname.startsWith("/")||(e.url.pathname="/"+e.url.pathname);let n=`${e.method}\n${e.url.pathname}\n${e.url.searchParams.toString()}\n`;for(const t of e.stringifiedHeaders)n+=t+"\n";return n+=`\n${e.signedHeaders}\n${t.from(r).toString("hex")}`,{canonicalRequest:n,additionalQueryString:""}}({method:r.method,url:r.url,stringifiedHeaders:h,signedHeaders:l,body:u}),g=o()(s.encode(y)),b=`SDK-HMAC-SHA256\n${(m={iso8601:c,yyyymmdd:d,regionName:e.regionName,serviceName:r.serviceName,hash:g}).iso8601}\n${m.yyyymmdd}/${m.regionName}/${m.serviceName}/sdk_request\n${t.from(m.hash).toString("hex")}`;var m;return{"X-Sdk-Date":c,Authorization:`${p}${v} Signature=${function(e,r){return t.from(Object(n.hmac)(e,s.encode(r))).toString("hex")}(function(t){try{const e=Object(n.hmac)(s.encode("SDK"+t.secretAccessKey),s.encode(t.dateStamp)),r=Object(n.hmac)(e,s.encode(t.regionName)),o=Object(n.hmac)(r,s.encode(t.serviceName));return Object(n.hmac)(o,s.encode("sdk_request"))}catch(t){throw new Error("Failed to generate signature key: "+t.message)}}({secretAccessKey:e.secretAccessKey,dateStamp:d,regionName:e.regionName,serviceName:r.serviceName}),b)}`}}}).call(this,r(121).Buffer)},function(t,e,r){"use strict";const n=r(116),o=r(117),i=r(118);function s(t){if("string"!=typeof t||1!==t.length)throw new TypeError("arrayFormatSeparator must be single character string")}function a(t,e){return e.encode?e.strict?n(t):encodeURIComponent(t):t}function u(t,e){return e.decode?o(t):t}function c(t){const e=t.indexOf("#");return-1!==e&&(t=t.slice(0,e)),t}function f(t){const e=(t=c(t)).indexOf("?");return-1===e?"":t.slice(e+1)}function h(t,e){return e.parseNumbers&&!Number.isNaN(Number(t))&&"string"==typeof t&&""!==t.trim()?t=Number(t):!e.parseBooleans||null===t||"true"!==t.toLowerCase()&&"false"!==t.toLowerCase()||(t="true"===t.toLowerCase()),t}function l(t,e){s((e=Object.assign({decode:!0,sort:!0,arrayFormat:"none",arrayFormatSeparator:",",parseNumbers:!1,parseBooleans:!1},e)).arrayFormatSeparator);const r=function(t){let e;switch(t.arrayFormat){case"index":return(t,r,n)=>{e=/\[(\d*)\]$/.exec(t),t=t.replace(/\[\d*\]$/,""),e?(void 0===n[t]&&(n[t]={}),n[t][e[1]]=r):n[t]=r};case"bracket":return(t,r,n)=>{e=/(\[\])$/.exec(t),t=t.replace(/\[\]$/,""),e?void 0!==n[t]?n[t]=[].concat(n[t],r):n[t]=[r]:n[t]=r};case"comma":case"separator":return(e,r,n)=>{const o="string"==typeof r&&r.split("").indexOf(t.arrayFormatSeparator)>-1?r.split(t.arrayFormatSeparator).map(e=>u(e,t)):null===r?r:u(r,t);n[e]=o};default:return(t,e,r)=>{void 0!==r[t]?r[t]=[].concat(r[t],e):r[t]=e}}}(e),n=Object.create(null);if("string"!=typeof t)return n;if(!(t=t.trim().replace(/^[?#&]/,"")))return n;for(const o of t.split("&")){let[t,s]=i(e.decode?o.replace(/\+/g," "):o,"=");s=void 0===s?null:["comma","separator"].includes(e.arrayFormat)?s:u(s,e),r(u(t,e),s,n)}for(const t of Object.keys(n)){const r=n[t];if("object"==typeof r&&null!==r)for(const t of Object.keys(r))r[t]=h(r[t],e);else n[t]=h(r,e)}return!1===e.sort?n:(!0===e.sort?Object.keys(n).sort():Object.keys(n).sort(e.sort)).reduce((t,e)=>{const r=n[e];return Boolean(r)&&"object"==typeof r&&!Array.isArray(r)?t[e]=function t(e){return Array.isArray(e)?e.sort():"object"==typeof e?t(Object.keys(e)).sort((t,e)=>Number(t)-Number(e)).map(t=>e[t]):e}(r):t[e]=r,t},Object.create(null))}e.extract=f,e.parse=l,e.stringify=(t,e)=>{if(!t)return"";s((e=Object.assign({encode:!0,strict:!0,arrayFormat:"none",arrayFormatSeparator:","},e)).arrayFormatSeparator);const r=r=>e.skipNull&&null==t[r]||e.skipEmptyString&&""===t[r],n=function(t){switch(t.arrayFormat){case"index":return e=>(r,n)=>{const o=r.length;return void 0===n||t.skipNull&&null===n||t.skipEmptyString&&""===n?r:null===n?[...r,[a(e,t),"[",o,"]"].join("")]:[...r,[a(e,t),"[",a(o,t),"]=",a(n,t)].join("")]};case"bracket":return e=>(r,n)=>void 0===n||t.skipNull&&null===n||t.skipEmptyString&&""===n?r:null===n?[...r,[a(e,t),"[]"].join("")]:[...r,[a(e,t),"[]=",a(n,t)].join("")];case"comma":case"separator":return e=>(r,n)=>null==n||0===n.length?r:0===r.length?[[a(e,t),"=",a(n,t)].join("")]:[[r,a(n,t)].join(t.arrayFormatSeparator)];default:return e=>(r,n)=>void 0===n||t.skipNull&&null===n||t.skipEmptyString&&""===n?r:null===n?[...r,a(e,t)]:[...r,[a(e,t),"=",a(n,t)].join("")]}}(e),o={};for(const e of Object.keys(t))r(e)||(o[e]=t[e]);const i=Object.keys(o);return!1!==e.sort&&i.sort(e.sort),i.map(r=>{const o=t[r];return void 0===o?"":null===o?a(r,e):Array.isArray(o)?o.reduce(n(r),[]).join("&"):a(r,e)+"="+a(o,e)}).filter(t=>t.length>0).join("&")},e.parseUrl=(t,e)=>{e=Object.assign({decode:!0},e);const[r,n]=i(t,"#");return Object.assign({url:r.split("?")[0]||"",query:l(f(t),e)},e&&e.parseFragmentIdentifier&&n?{fragmentIdentifier:u(n,e)}:{})},e.stringifyUrl=(t,r)=>{r=Object.assign({encode:!0,strict:!0},r);const n=c(t.url).split("?")[0]||"",o=e.extract(t.url),i=e.parse(o,{sort:!1}),s=Object.assign(i,t.query);let u=e.stringify(s,r);u&&(u="?"+u);let f=function(t){let e="";const r=t.indexOf("#");return-1!==r&&(e=t.slice(r)),e}(t.url);return t.fragmentIdentifier&&(f="#"+a(t.fragmentIdentifier,r)),`${n}${u}${f}`}},function(t,e,r){var n;void 0===(n=function(){return function(){var t=r;t.Integer={type:"integer"};var e={String:String,Boolean:Boolean,Number:Number,Object:Object,Array:Array,Date:Date};function r(t,e){return r(t,e,{changing:!1})}t.validate=r,t.checkPropertyChange=function(t,e,n){return r(t,e,{changing:n||"property"})};var r=t._validate=function(t,r,n){n||(n={});var o=n.changing;function i(t){return t.type||e[t.name]==t&&t.name.toLowerCase()}var s=[];function a(t,e,r,u){var c;function f(t){s.push({property:r,message:t})}if(r+=r?"number"==typeof u?"["+u+"]":void 0===u?"":"."+u:u,("object"!=typeof e||e instanceof Array)&&(r||"function"!=typeof e)&&(!e||!i(e)))return"function"==typeof e?t instanceof e||f("is not an instance of the class/constructor "+e.name):e&&f("Invalid schema/property definition "+e),null;function h(t,e){if(t){if(!("string"!=typeof t||"any"==t||("null"==t?null===e:typeof e==t)||e instanceof Array&&"array"==t||e instanceof Date&&"date"==t||"integer"==t&&e%1==0))return[{property:r,message:typeof e+" value found, but a "+t+" is required"}];if(t instanceof Array){for(var n=[],o=0;o<t.length&&(n=h(t[o],e)).length;o++);if(n.length)return n}else if("object"==typeof t){var i=s;s=[],a(e,t,r);var u=s;return s=i,u}}return[]}if(o&&e.readonly&&f("is a readonly field, it can not be changed"),e.extends&&a(t,e.extends,r,u),void 0===t)e.required&&f("is missing and it is required");else if(s=s.concat(h(i(e),t)),e.disallow&&!h(e.disallow,t).length&&f(" disallowed value was matched"),null!==t){if(t instanceof Array){if(e.items){var l=e.items instanceof Array,p=e.items;for(u=0,c=t.length;u<c;u+=1)l&&(p=e.items[u]),n.coerce&&(t[u]=n.coerce(t[u],p)),s.concat(a(t[u],p,r,u))}e.minItems&&t.length<e.minItems&&f("There must be a minimum of "+e.minItems+" in the array"),e.maxItems&&t.length>e.maxItems&&f("There must be a maximum of "+e.maxItems+" in the array")}else(e.properties||e.additionalProperties)&&s.concat(function(t,e,r,i){if("object"==typeof e)for(var u in("object"!=typeof t||t instanceof Array)&&s.push({property:r,message:"an object is required"}),e)if(e.hasOwnProperty(u)){var c=t[u];if(void 0===c&&n.existingOnly)continue;var f=e[u];void 0===c&&f.default&&(c=t[u]=f.default),n.coerce&&u in t&&(c=t[u]=n.coerce(c,f)),a(c,f,r,u)}for(u in t){if(t.hasOwnProperty(u)&&("_"!=u.charAt(0)||"_"!=u.charAt(1))&&e&&!e[u]&&!1===i){if(n.filter){delete t[u];continue}s.push({property:r,message:typeof c+"The property "+u+" is not defined in the schema and the schema does not allow additional properties"})}var h=e&&e[u]&&e[u].requires;h&&!(h in t)&&s.push({property:r,message:"the presence of the property "+u+" requires that "+h+" also be present"}),c=t[u],!i||e&&"object"==typeof e&&u in e||(n.coerce&&(c=t[u]=n.coerce(c,i)),a(c,i,r,u)),!o&&c&&c.$schema&&(s=s.concat(a(c,c.$schema,r,u)))}return s}(t,e.properties,r,e.additionalProperties));if(e.pattern&&"string"==typeof t&&!t.match(e.pattern)&&f("does not match the regex pattern "+e.pattern),e.maxLength&&"string"==typeof t&&t.length>e.maxLength&&f("may only be "+e.maxLength+" characters long"),e.minLength&&"string"==typeof t&&t.length<e.minLength&&f("must be at least "+e.minLength+" characters long"),void 0!==typeof e.minimum&&typeof t==typeof e.minimum&&e.minimum>t&&f("must have a minimum value of "+e.minimum),void 0!==typeof e.maximum&&typeof t==typeof e.maximum&&e.maximum<t&&f("must have a maximum value of "+e.maximum),e.enum){var d,y=e.enum;c=y.length;for(var v=0;v<c;v++)if(y[v]===t){d=1;break}d||f("does not have a value in the enumeration "+y.join(", "))}"number"==typeof e.maxDecimal&&t.toString().match(new RegExp("\\.[0-9]{"+(e.maxDecimal+1)+",}"))&&f("may only have "+e.maxDecimal+" digits of decimal places")}return null}return r&&a(t,r,"",o||""),!o&&t&&t.$schema&&a(t,t.$schema,"",""),{valid:!s.length,errors:s}};return t.mustBeValid=function(t){if(!t.valid)throw new TypeError(t.errors.map((function(t){return"for property "+t.property+": "+t.message})).join(", \n"))},t}()}.apply(e,[]))||(t.exports=n)},function(t,e,r){var n=r(50),o=r(80),i=r(33),s=r(82),a=r(89),u=r(92),c=r(93),f=r(94),h=r(96),l=r(97),p=r(98),d=r(14),y=r(103),v=r(104),g=r(110),b=r(12),m=r(20),w=r(112),_=r(3),x=r(114),j=r(19),A=r(25),E={};E["[object Arguments]"]=E["[object Array]"]=E["[object ArrayBuffer]"]=E["[object DataView]"]=E["[object Boolean]"]=E["[object Date]"]=E["[object Float32Array]"]=E["[object Float64Array]"]=E["[object Int8Array]"]=E["[object Int16Array]"]=E["[object Int32Array]"]=E["[object Map]"]=E["[object Number]"]=E["[object Object]"]=E["[object RegExp]"]=E["[object Set]"]=E["[object String]"]=E["[object Symbol]"]=E["[object Uint8Array]"]=E["[object Uint8ClampedArray]"]=E["[object Uint16Array]"]=E["[object Uint32Array]"]=!0,E["[object Error]"]=E["[object Function]"]=E["[object WeakMap]"]=!1,t.exports=function t(e,r,S,O,P,R){var T,I=1&r,U=2&r,k=4&r;if(S&&(T=P?S(e,O,P,R):S(e)),void 0!==T)return T;if(!_(e))return e;var B=b(e);if(B){if(T=y(e),!I)return c(e,T)}else{var C=d(e),$="[object Function]"==C||"[object GeneratorFunction]"==C;if(m(e))return u(e,I);if("[object Object]"==C||"[object Arguments]"==C||$&&!P){if(T=U||$?{}:g(e),!I)return U?h(e,a(T,e)):f(e,s(T,e))}else{if(!E[C])return P?e:{};T=v(e,C,I)}}R||(R=new n);var D=R.get(e);if(D)return D;R.set(e,T),x(e)?e.forEach((function(n){T.add(t(n,r,S,n,e,R))})):w(e)&&e.forEach((function(n,o){T.set(o,t(n,r,S,o,e,R))}));var L=B?void 0:(k?U?p:l:U?A:j)(e);return o(L||e,(function(n,o){L&&(n=e[o=n]),i(T,o,t(n,r,S,o,e,R))})),T}},function(t,e,r){var n=r(6),o=r(56),i=r(57),s=r(58),a=r(59),u=r(60);function c(t){var e=this.__data__=new n(t);this.size=e.size}c.prototype.clear=o,c.prototype.delete=i,c.prototype.get=s,c.prototype.has=a,c.prototype.set=u,t.exports=c},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,r){var n=r(7),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,r=n(e,t);return!(r<0)&&(r==e.length-1?e.pop():o.call(e,r,1),--this.size,!0)}},function(t,e,r){var n=r(7);t.exports=function(t){var e=this.__data__,r=n(e,t);return r<0?void 0:e[r][1]}},function(t,e,r){var n=r(7);t.exports=function(t){return n(this.__data__,t)>-1}},function(t,e,r){var n=r(7);t.exports=function(t,e){var r=this.__data__,o=n(r,t);return o<0?(++this.size,r.push([t,e])):r[o][1]=e,this}},function(t,e,r){var n=r(6);t.exports=function(){this.__data__=new n,this.size=0}},function(t,e){t.exports=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r}},function(t,e){t.exports=function(t){return this.__data__.get(t)}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e,r){var n=r(6),o=r(17),i=r(67);t.exports=function(t,e){var r=this.__data__;if(r instanceof n){var s=r.__data__;if(!o||s.length<199)return s.push([t,e]),this.size=++r.size,this;r=this.__data__=new i(s)}return r.set(t,e),this.size=r.size,this}},function(t,e,r){var n=r(29),o=r(64),i=r(3),s=r(32),a=/^\[object .+?Constructor\]$/,u=Function.prototype,c=Object.prototype,f=u.toString,h=c.hasOwnProperty,l=RegExp("^"+f.call(h).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||o(t))&&(n(t)?l:a).test(s(t))}},function(t,e,r){var n=r(18),o=Object.prototype,i=o.hasOwnProperty,s=o.toString,a=n?n.toStringTag:void 0;t.exports=function(t){var e=i.call(t,a),r=t[a];try{t[a]=void 0;var n=!0}catch(t){}var o=s.call(t);return n&&(e?t[a]=r:delete t[a]),o}},function(t,e){var r=Object.prototype.toString;t.exports=function(t){return r.call(t)}},function(t,e,r){var n,o=r(65),i=(n=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";t.exports=function(t){return!!i&&i in t}},function(t,e,r){var n=r(0)["__core-js_shared__"];t.exports=n},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e,r){var n=r(68),o=r(75),i=r(77),s=r(78),a=r(79);function u(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=s,u.prototype.set=a,t.exports=u},function(t,e,r){var n=r(69),o=r(6),i=r(17);t.exports=function(){this.size=0,this.__data__={hash:new n,map:new(i||o),string:new n}}},function(t,e,r){var n=r(70),o=r(71),i=r(72),s=r(73),a=r(74);function u(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=s,u.prototype.set=a,t.exports=u},function(t,e,r){var n=r(9);t.exports=function(){this.__data__=n?n(null):{},this.size=0}},function(t,e){t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},function(t,e,r){var n=r(9),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(n){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return o.call(e,t)?e[t]:void 0}},function(t,e,r){var n=r(9),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return n?void 0!==e[t]:o.call(e,t)}},function(t,e,r){var n=r(9);t.exports=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=n&&void 0===e?"__lodash_hash_undefined__":e,this}},function(t,e,r){var n=r(10);t.exports=function(t){var e=n(this,t).delete(t);return this.size-=e?1:0,e}},function(t,e){t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},function(t,e,r){var n=r(10);t.exports=function(t){return n(this,t).get(t)}},function(t,e,r){var n=r(10);t.exports=function(t){return n(this,t).has(t)}},function(t,e,r){var n=r(10);t.exports=function(t,e){var r=n(this,t),o=r.size;return r.set(t,e),this.size+=r.size==o?0:1,this}},function(t,e){t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length;++r<n&&!1!==e(t[r],r,t););return t}},function(t,e,r){var n=r(2),o=function(){try{var t=n(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=o},function(t,e,r){var n=r(11),o=r(19);t.exports=function(t,e){return t&&n(e,o(e),t)}},function(t,e){t.exports=function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}},function(t,e,r){var n=r(8),o=r(4);t.exports=function(t){return o(t)&&"[object Arguments]"==n(t)}},function(t,e){t.exports=function(){return!1}},function(t,e){var r=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&r.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e,r){var n=r(8),o=r(38),i=r(4),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,t.exports=function(t){return i(t)&&o(t.length)&&!!s[n(t)]}},function(t,e,r){var n=r(40)(Object.keys,Object);t.exports=n},function(t,e,r){var n=r(11),o=r(25);t.exports=function(t,e){return t&&n(e,o(e),t)}},function(t,e,r){var n=r(3),o=r(13),i=r(91),s=Object.prototype.hasOwnProperty;t.exports=function(t){if(!n(t))return i(t);var e=o(t),r=[];for(var a in t)("constructor"!=a||!e&&s.call(t,a))&&r.push(a);return r}},function(t,e){t.exports=function(t){var e=[];if(null!=t)for(var r in Object(t))e.push(r);return e}},function(t,e,r){(function(t){var n=r(0),o=e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,s=i&&i.exports===o?n.Buffer:void 0,a=s?s.allocUnsafe:void 0;t.exports=function(t,e){if(e)return t.slice();var r=t.length,n=a?a(r):new t.constructor(r);return t.copy(n),n}}).call(this,r(21)(t))},function(t,e){t.exports=function(t,e){var r=-1,n=t.length;for(e||(e=Array(n));++r<n;)e[r]=t[r];return e}},function(t,e,r){var n=r(11),o=r(26);t.exports=function(t,e){return n(t,o(t),e)}},function(t,e){t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length,o=0,i=[];++r<n;){var s=t[r];e(s,r,t)&&(i[o++]=s)}return i}},function(t,e,r){var n=r(11),o=r(42);t.exports=function(t,e){return n(t,o(t),e)}},function(t,e,r){var n=r(45),o=r(26),i=r(19);t.exports=function(t){return n(t,i,o)}},function(t,e,r){var n=r(45),o=r(42),i=r(25);t.exports=function(t){return n(t,i,o)}},function(t,e,r){var n=r(2)(r(0),"DataView");t.exports=n},function(t,e,r){var n=r(2)(r(0),"Promise");t.exports=n},function(t,e,r){var n=r(2)(r(0),"Set");t.exports=n},function(t,e,r){var n=r(2)(r(0),"WeakMap");t.exports=n},function(t,e){var r=Object.prototype.hasOwnProperty;t.exports=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&r.call(t,"index")&&(n.index=t.index,n.input=t.input),n}},function(t,e,r){var n=r(27),o=r(106),i=r(107),s=r(108),a=r(109);t.exports=function(t,e,r){var u=t.constructor;switch(e){case"[object ArrayBuffer]":return n(t);case"[object Boolean]":case"[object Date]":return new u(+t);case"[object DataView]":return o(t,r);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return a(t,r);case"[object Map]":return new u;case"[object Number]":case"[object String]":return new u(t);case"[object RegExp]":return i(t);case"[object Set]":return new u;case"[object Symbol]":return s(t)}}},function(t,e,r){var n=r(0).Uint8Array;t.exports=n},function(t,e,r){var n=r(27);t.exports=function(t,e){var r=e?n(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}},function(t,e){var r=/\w*$/;t.exports=function(t){var e=new t.constructor(t.source,r.exec(t));return e.lastIndex=t.lastIndex,e}},function(t,e,r){var n=r(18),o=n?n.prototype:void 0,i=o?o.valueOf:void 0;t.exports=function(t){return i?Object(i.call(t)):{}}},function(t,e,r){var n=r(27);t.exports=function(t,e){var r=e?n(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}},function(t,e,r){var n=r(111),o=r(44),i=r(13);t.exports=function(t){return"function"!=typeof t.constructor||i(t)?{}:n(o(t))}},function(t,e,r){var n=r(3),o=Object.create,i=function(){function t(){}return function(e){if(!n(e))return{};if(o)return o(e);t.prototype=e;var r=new t;return t.prototype=void 0,r}}();t.exports=i},function(t,e,r){var n=r(113),o=r(22),i=r(23),s=i&&i.isMap,a=s?o(s):n;t.exports=a},function(t,e,r){var n=r(14),o=r(4);t.exports=function(t){return o(t)&&"[object Map]"==n(t)}},function(t,e,r){var n=r(115),o=r(22),i=r(23),s=i&&i.isSet,a=s?o(s):n;t.exports=a},function(t,e,r){var n=r(14),o=r(4);t.exports=function(t){return o(t)&&"[object Set]"==n(t)}},function(t,e,r){"use strict";t.exports=t=>encodeURIComponent(t).replace(/[!'()*]/g,t=>"%"+t.charCodeAt(0).toString(16).toUpperCase())},function(t,e,r){"use strict";var n=new RegExp("%[a-f0-9]{2}","gi"),o=new RegExp("(%[a-f0-9]{2})+","gi");function i(t,e){try{return decodeURIComponent(t.join(""))}catch(t){}if(1===t.length)return t;e=e||1;var r=t.slice(0,e),n=t.slice(e);return Array.prototype.concat.call([],i(r),i(n))}function s(t){try{return decodeURIComponent(t)}catch(o){for(var e=t.match(n),r=1;r<e.length;r++)e=(t=i(e,r).join("")).match(n);return t}}t.exports=function(t){if("string"!=typeof t)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof t+"`");try{return t=t.replace(/\+/g," "),decodeURIComponent(t)}catch(e){return function(t){for(var e={"%FE%FF":"��","%FF%FE":"��"},r=o.exec(t);r;){try{e[r[0]]=decodeURIComponent(r[0])}catch(t){var n=s(r[0]);n!==r[0]&&(e[r[0]]=n)}r=o.exec(t)}e["%C2"]="�";for(var i=Object.keys(e),a=0;a<i.length;a++){var u=i[a];t=t.replace(new RegExp(u,"g"),e[u])}return t}(t)}}},function(t,e,r){"use strict";t.exports=(t,e)=>{if("string"!=typeof t||"string"!=typeof e)throw new TypeError("Expected the arguments to be of type `string`");if(""===e)return[t];const r=t.indexOf(e);return-1===r?[t]:[t.slice(0,r),t.slice(r+e.length)]}},function(t,e,r){r(120),t.exports=self.fetch.bind(self)},function(t,e,r){"use strict";r.r(e),r.d(e,"Headers",(function(){return d})),r.d(e,"Request",(function(){return _})),r.d(e,"Response",(function(){return j})),r.d(e,"DOMException",(function(){return E})),r.d(e,"fetch",(function(){return S}));var n="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==n&&n,o="URLSearchParams"in n,i="Symbol"in n&&"iterator"in Symbol,s="FileReader"in n&&"Blob"in n&&function(){try{return new Blob,!0}catch(t){return!1}}(),a="FormData"in n,u="ArrayBuffer"in n;if(u)var c=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],f=ArrayBuffer.isView||function(t){return t&&c.indexOf(Object.prototype.toString.call(t))>-1};function h(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function l(t){return"string"!=typeof t&&(t=String(t)),t}function p(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return i&&(e[Symbol.iterator]=function(){return e}),e}function d(t){this.map={},t instanceof d?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function y(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function v(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function g(t){var e=new FileReader,r=v(e);return e.readAsArrayBuffer(t),r}function b(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:s&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:a&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:o&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():u&&s&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=b(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(t)||f(t))?this._bodyArrayBuffer=b(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):o&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},s&&(this.blob=function(){var t=y(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var t=y(this);return t||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(g)}),this.text=function(){var t,e,r,n=y(this);if(n)return n;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,r=v(e),e.readAsText(t),r;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},a&&(this.formData=function(){return this.text().then(x)}),this.json=function(){return this.text().then(JSON.parse)},this}d.prototype.append=function(t,e){t=h(t),e=l(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},d.prototype.delete=function(t){delete this.map[h(t)]},d.prototype.get=function(t){return t=h(t),this.has(t)?this.map[t]:null},d.prototype.has=function(t){return this.map.hasOwnProperty(h(t))},d.prototype.set=function(t,e){this.map[h(t)]=l(e)},d.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},d.prototype.keys=function(){var t=[];return this.forEach((function(e,r){t.push(r)})),p(t)},d.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),p(t)},d.prototype.entries=function(){var t=[];return this.forEach((function(e,r){t.push([r,e])})),p(t)},i&&(d.prototype[Symbol.iterator]=d.prototype.entries);var w=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function _(t,e){if(!(this instanceof _))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var r,n,o=(e=e||{}).body;if(t instanceof _){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new d(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new d(e.headers)),this.method=(r=e.method||this.method||"GET",n=r.toUpperCase(),w.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var i=/([?&])_=[^&]*/;if(i.test(this.url))this.url=this.url.replace(i,"$1_="+(new Date).getTime());else{this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function x(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function j(t,e){if(!(this instanceof j))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"",this.headers=new d(e.headers),this.url=e.url||"",this._initBody(t)}_.prototype.clone=function(){return new _(this,{body:this._bodyInit})},m.call(_.prototype),m.call(j.prototype),j.prototype.clone=function(){return new j(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new d(this.headers),url:this.url})},j.error=function(){var t=new j(null,{status:0,statusText:""});return t.type="error",t};var A=[301,302,303,307,308];j.redirect=function(t,e){if(-1===A.indexOf(e))throw new RangeError("Invalid status code");return new j(null,{status:e,headers:{location:t}})};var E=n.DOMException;try{new E}catch(t){(E=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),E.prototype.constructor=E}function S(t,e){return new Promise((function(r,o){var i=new _(t,e);if(i.signal&&i.signal.aborted)return o(new E("Aborted","AbortError"));var a=new XMLHttpRequest;function c(){a.abort()}a.onload=function(){var t,e,n={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",e=new d,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}})),e)};n.url="responseURL"in a?a.responseURL:n.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;setTimeout((function(){r(new j(o,n))}),0)},a.onerror=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},a.ontimeout=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},a.onabort=function(){setTimeout((function(){o(new E("Aborted","AbortError"))}),0)},a.open(i.method,function(t){try{return""===t&&n.location.href?n.location.href:t}catch(e){return t}}(i.url),!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&(s?a.responseType="blob":u&&i.headers.get("Content-Type")&&-1!==i.headers.get("Content-Type").indexOf("application/octet-stream")&&(a.responseType="arraybuffer")),!e||"object"!=typeof e.headers||e.headers instanceof d?i.headers.forEach((function(t,e){a.setRequestHeader(e,t)})):Object.getOwnPropertyNames(e.headers).forEach((function(t){a.setRequestHeader(t,l(e.headers[t]))})),i.signal&&(i.signal.addEventListener("abort",c),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",c)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}S.polyfill=!0,n.fetch||(n.fetch=S,n.Headers=d,n.Request=_,n.Response=j)},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(122),o=r(123),i=r(124);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=l(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),o=(t=a(t,n)).write(e,r);o!==n&&(t=t.slice(0,o));return t}(t,e,r):function(t,e){if(u.isBuffer(e)){var r=0|p(e.length);return 0===(t=a(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?a(t,0):l(t,e);if("Buffer"===e.type&&i(e.data))return l(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(f(e),t=a(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function l(t,e){var r=e.length<0?0:0|p(e.length);t=a(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return M(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return F(t).length;default:if(n)return M(t).length;e=(""+e).toLowerCase(),n=!0}}function y(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return R(this,e,r);case"utf8":case"utf-8":return S(this,e,r);case"ascii":return O(this,e,r);case"latin1":case"binary":return P(this,e,r);case"base64":return E(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function v(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function g(t,e,r,n,o){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(o)return-1;r=t.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:b(t,e,r,n,o);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):b(t,[e],r,n,o);throw new TypeError("val must be string, number or Buffer")}function b(t,e,r,n,o){var i,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(o){var f=-1;for(i=r;i<a;i++)if(c(t,i)===c(e,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===u)return f*s}else-1!==f&&(i-=i-f),f=-1}else for(r+u>a&&(r=a-u),i=r;i>=0;i--){for(var h=!0,l=0;l<u;l++)if(c(t,i+l)!==c(e,l)){h=!1;break}if(h)return i}return-1}function m(t,e,r,n){r=Number(r)||0;var o=t.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[r+s]=a}return s}function w(t,e,r,n){return q(M(e,t.length-r),t,r,n)}function _(t,e,r,n){return q(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function x(t,e,r,n){return _(t,e,r,n)}function j(t,e,r,n){return q(F(e),t,r,n)}function A(t,e,r,n){return q(function(t,e){for(var r,n,o,i=[],s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(e,t.length-r),t,r,n)}function E(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function S(t,e,r){r=Math.min(t.length,r);for(var n=[],o=e;o<r;){var i,s,a,u,c=t[o],f=null,h=c>239?4:c>223?3:c>191?2:1;if(o+h<=r)switch(h){case 1:c<128&&(f=c);break;case 2:128==(192&(i=t[o+1]))&&(u=(31&c)<<6|63&i)>127&&(f=u);break;case 3:i=t[o+1],s=t[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(f=u);break;case 4:i=t[o+1],s=t[o+2],a=t[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(f=u)}null===f?(f=65533,h=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=h}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=4096));return r}(n)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return c(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function(t,e,r,n){return f(e),e<=0?a(t,e):void 0!==r?"string"==typeof n?a(t,e).fill(r,n):a(t,e).fill(r):a(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return h(null,t)},u.allocUnsafeSlow=function(t){return h(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),o=0;for(r=0;r<t.length;++r){var s=t[r];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,o),o+=s.length}return n},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)v(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)v(this,e,e+3),v(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)v(this,e,e+7),v(this,e+1,e+6),v(this,e+2,e+5),v(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?S(this,0,t):y.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,r,n,o){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),e<0||r>t.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&e>=r)return 0;if(n>=o)return-1;if(e>=r)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0),a=Math.min(i,s),c=this.slice(n,o),f=t.slice(e,r),h=0;h<a;++h)if(c[h]!==f[h]){i=c[h],s=f[h];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return g(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return g(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-e;if((void 0===r||r>o)&&(r=o),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return m(this,t,e,r);case"utf8":case"utf-8":return w(this,t,e,r);case"ascii":return _(this,t,e,r);case"latin1":case"binary":return x(this,t,e,r);case"base64":return j(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function O(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(127&t[o]);return n}function P(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(t[o]);return n}function R(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=e;i<r;++i)o+=N(t[i]);return o}function T(t,e,r){for(var n=t.slice(e,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function I(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function U(t,e,r,n,o,i){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function k(t,e,r,n){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-r,2);o<i;++o)t[r+o]=(e&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function B(t,e,r,n){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-r,4);o<i;++o)t[r+o]=e>>>8*(n?o:3-o)&255}function C(t,e,r,n,o,i){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function $(t,e,r,n,i){return i||C(t,0,r,4),o.write(t,e,r,n,23,4),r+4}function D(t,e,r,n,i){return i||C(t,0,r,8),o.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=u.prototype;else{var o=e-t;r=new u(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+t]}return r},u.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||I(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n},u.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||I(t,e,this.length);for(var n=this[t+--e],o=1;e>0&&(o*=256);)n+=this[t+--e]*o;return n},u.prototype.readUInt8=function(t,e){return e||I(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||I(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||I(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||I(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||I(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||I(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||I(t,e,this.length);for(var n=e,o=1,i=this[t+--n];n>0&&(o*=256);)i+=this[t+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return e||I(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||I(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){e||I(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return e||I(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||I(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||I(t,4,this.length),o.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||I(t,4,this.length),o.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||I(t,8,this.length),o.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||I(t,8,this.length),o.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||U(this,t,e,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[e]=255&t;++i<r&&(o*=256);)this[e+i]=t/o&255;return e+r},u.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||U(this,t,e,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+r},u.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||U(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||U(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):k(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||U(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):k(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||U(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):B(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||U(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):B(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);U(this,t,e,r,o-1,-o)}var i=0,s=1,a=0;for(this[e]=255&t;++i<r&&(s*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);U(this,t,e,r,o-1,-o)}var i=r-1,s=1,a=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||U(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||U(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):k(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||U(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):k(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||U(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):B(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||U(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):B(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,r){return $(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return $(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return D(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return D(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var o,i=n-r;if(this===t&&r<e&&e<n)for(o=i-1;o>=0;--o)t[o+e]=this[o+r];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+i),e);return i},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{var s=u.isBuffer(t)?t:M(new u(t,n).toString()),a=s.length;for(i=0;i<r-e;++i)this[i+e]=s[i%a]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function N(t){return t<16?"0"+t.toString(16):t.toString(16)}function M(t,e){var r;e=e||1/0;for(var n=t.length,o=null,i=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(e-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((e-=1)<0)break;i.push(r)}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function F(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(L,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function q(t,e,r,n){for(var o=0;o<n&&!(o+r>=e.length||o>=t.length);++o)e[o+r]=t[o];return o}}).call(this,r(31))},function(t,e,r){"use strict";e.byteLength=function(t){var e=c(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=c(t),s=n[0],a=n[1],u=new i(function(t,e,r){return 3*(e+r)/4-r}(0,s,a)),f=0,h=a>0?s-4:s;for(r=0;r<h;r+=4)e=o[t.charCodeAt(r)]<<18|o[t.charCodeAt(r+1)]<<12|o[t.charCodeAt(r+2)]<<6|o[t.charCodeAt(r+3)],u[f++]=e>>16&255,u[f++]=e>>8&255,u[f++]=255&e;2===a&&(e=o[t.charCodeAt(r)]<<2|o[t.charCodeAt(r+1)]>>4,u[f++]=255&e);1===a&&(e=o[t.charCodeAt(r)]<<10|o[t.charCodeAt(r+1)]<<4|o[t.charCodeAt(r+2)]>>2,u[f++]=e>>8&255,u[f++]=255&e);return u},e.fromByteArray=function(t){for(var e,r=t.length,o=r%3,i=[],s=0,a=r-o;s<a;s+=16383)i.push(f(t,s,s+16383>a?a:s+16383));1===o?(e=t[r-1],i.push(n[e>>2]+n[e<<4&63]+"==")):2===o&&(e=(t[r-2]<<8)+t[r-1],i.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return i.join("")};for(var n=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)n[a]=s[a],o[s.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function f(t,e,r){for(var o,i,s=[],a=e;a<r;a+=3)o=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,o){var i,s,a=8*o-n-1,u=(1<<a)-1,c=u>>1,f=-7,h=r?o-1:0,l=r?-1:1,p=t[e+h];for(h+=l,i=p&(1<<-f)-1,p>>=-f,f+=a;f>0;i=256*i+t[e+h],h+=l,f-=8);for(s=i&(1<<-f)-1,i>>=-f,f+=n;f>0;s=256*s+t[e+h],h+=l,f-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),i-=c}return(p?-1:1)*s*Math.pow(2,i-n)},e.write=function(t,e,r,n,o,i){var s,a,u,c=8*i-o-1,f=(1<<c)-1,h=f>>1,l=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=f):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+h>=1?l/u:l*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=f?(a=0,s=f):s+h>=1?(a=(e*u-1)*Math.pow(2,o),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;t[r+p]=255&a,p+=d,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;t[r+p]=255&s,p+=d,s/=256,c-=8);t[r+p-d]|=128*y}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";const n=r(126),o={exact:!1},i=n.v4().source+"\\/(3[0-2]|[12]?[0-9])",s=n.v6().source+"\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])",a=new RegExp(`^${i}$`),u=new RegExp(`^${s}$`),c=new RegExp(`(?:^${i}$)|(?:^${s}$)`);t.exports=({exact:t}=o)=>t?c:new RegExp(`(?:${i})|(?:${s})`,"g"),t.exports.v4=({exact:t}=o)=>t?a:new RegExp(i,"g"),t.exports.v6=({exact:t}=o)=>t?u:new RegExp(s,"g")},function(t,e,r){"use strict";const n=t=>t&&t.includeBoundaries?"(?:(?<=\\s|^)(?=[a-fA-F\\d:])|(?<=[a-fA-F\\d:])(?=\\s|$))":"",o="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",i="[a-fA-F\\d]{1,4}",s=`\n(\n(?:${i}:){7}(?:${i}|:)|                                // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${i}:){6}(?:${o}|:${i}|:)|                         // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${i}:){5}(?::${o}|(:${i}){1,2}|:)|                 // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${i}:){4}(?:(:${i}){0,1}:${o}|(:${i}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${i}:){3}(?:(:${i}){0,2}:${o}|(:${i}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${i}:){2}(?:(:${i}){0,3}:${o}|(:${i}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${i}:){1}(?:(:${i}){0,4}:${o}|(:${i}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::((?::${i}){0,5}:${o}|(?::${i}){1,7}|:))           // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(%[0-9a-zA-Z]{1,})?                                           // %eth0            %1\n`.replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),a=new RegExp(`(?:^${o}$)|(?:^${s}$)`),u=new RegExp(`^${o}$`),c=new RegExp(`^${s}$`),f=t=>t&&t.exact?a:new RegExp(`(?:${n(t)}${o}${n(t)})|(?:${n(t)}${s}${n(t)})`,"g");f.v4=t=>t&&t.exact?u:new RegExp(`${n(t)}${o}${n(t)}`,"g"),f.v6=t=>t&&t.exact?c:new RegExp(`${n(t)}${s}${n(t)}`,"g"),t.exports=f},function(t,e,r){"use strict";r.r(e),r.d(e,"cloud",(function(){return o})),r.d(e,"normalizeDateTime",(function(){return s})),r.d(e,"HttpError",(function(){return y})),r.d(e,"RequestError",(function(){return v})),r.d(e,"mergeHeaders",(function(){return b})),r.d(e,"RequestOpts",(function(){return m})),r.d(e,"Handlers",(function(){return _})),r.d(e,"joinURL",(function(){return A})),r.d(e,"getSignHeaders",(function(){return E.a})),r.d(e,"ComputeV2",(function(){return $})),r.d(e,"ComputeV1",(function(){return M})),r.d(e,"createToken",(function(){return q})),r.d(e,"verifyToken",(function(){return z})),r.d(e,"listEndpoints",(function(){return X})),r.d(e,"createCredential",(function(){return Y})),r.d(e,"listServices",(function(){return W})),r.d(e,"IdentityV3",(function(){return Q})),r.d(e,"ImageV2",(function(){return et})),r.d(e,"VpcV1",(function(){return ft})),r.d(e,"SwiftV1",(function(){return bt})),r.d(e,"Client",(function(){return wt}));class n{constructor(t){this.config={auth:{auth_url:t}}}withRegion(t){return this.config.region=t,this}withProject(t){return this.config.auth.project_name=t,this}withPassword(t,e,r){return this.config.auth.domain_name=t,this.config.auth.username=e,this.config.auth.password=r,this}withToken(t){return this.config.auth.token=t,this}withAKSK(t,e){return this.config.auth.ak=t,this.config.auth.sk=e,this}}function o(t){return new n(t)}const i=/(?<=\d{2})\.\d{3}(?=Z)/;function s(t){if(t)return new Date(t).toISOString().replace(i,"")}var a=r(5),u=r.n(a),c=r(15),f=r.n(c),h=r(47),l=r(48),p=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};r(119);const d=/^https?:\/\/.+/;class y extends Error{constructor(t,e){super(e),this.name="HTTPError",this.statusCode=t}}class v extends Error{}function g(t){const e=new Headers;return t?t instanceof Headers?new Headers(t):(Object.entries(t).forEach(t=>{null!=t[1]&&e.append(t[0],String(t[1]))}),e):e}function b(t,e){if(!t&&!e)return new Headers;const r=g(t);if(e)for(const[t,n]of g(e))r.append(t,n);return r}class m{constructor(t){if(!t.method)throw new v("Request without Method: "+JSON.stringify(t));if(this.method=t.method,null==t.url)throw new v("Request without URL: "+JSON.stringify(t));this.url=t.url,this.headers=b(t.headers);const e={},r=t.params;r&&Object.keys(r).forEach(t=>{null!=r[t]&&(e[t]=String(r[t]))}),this.params=e,t.json&&(this.body=JSON.stringify(t.json)),t.handler&&(this.handler=t.handler),this.schema=t.schema?t.schema:{}}}function w(t){const e=t&&!f()(t)?u()(t):{};return e.headers=b(e.headers),e}class _{constructor(){this.peloton=[]}*[Symbol.iterator](){yield*this.peloton.reverse()}push(t){this.peloton.push(t)}}class x{constructor(t){this.baseConfig=w(t),this.beforeRequest=new _}child(t){const e=u()(this);return e.baseConfig=t?w(t):w(),e}request(t){return p(this,void 0,void 0,(function*(){let e=new m(t);e.baseURL||(e.baseURL=this.baseConfig.baseURL),e.headers=b(this.baseConfig.headers,e.headers),this.beforeRequest.first&&(e=this.beforeRequest.first(e)),e.handler&&(e=e.handler(e));for(const t of this.beforeRequest)e=t(e);let{baseURL:r,url:n}=e;r=r||this.baseConfig.baseURL,!n.match(d)&&r&&(n=A(r,n)),e.params&&(n=Object(h.stringifyUrl)({url:n,query:e.params},{encode:!0,skipNull:!0})),e.url=n,e.baseURL="",this.beforeRequest.last&&(e=this.beforeRequest.last(e));const o=yield fetch(n,e);if(!o.ok){const t={};e.headers.forEach((e,r)=>{if(r.toLowerCase().endsWith("-token")){const n=e.length;t[r]=`${e.substring(0,10)}...${e.substring(n-10,n)}`}else t[r]=e});const r=JSON.stringify(e,(e,r)=>"headers"===e?t:r),n=`HTTP error received. ${o.status} ${o.statusText}: ${yield o.text()}Request Opts:\n`+r;throw new y(o.status,n)}if(o.data={},o.raw=yield o.blob(),function(t){const e=t.headers.get("content-type");if(!e)return!1;return e.startsWith("application/json")}(o)){o.raw.size&&(o.data=JSON.parse(yield o.raw.text()));const t=Object(l.validate)(o.data,e.schema);if(!t.valid)throw Error("Failed JSON Schema validation: "+t.errors)}return o}))}get(t){return p(this,void 0,void 0,(function*(){return t.method="GET",yield this.request(t)}))}post(t){return p(this,void 0,void 0,(function*(){return t.method="POST",yield this.request(t)}))}put(t){return p(this,void 0,void 0,(function*(){return t.method="PUT",yield this.request(t)}))}delete(t){return p(this,void 0,void 0,(function*(){return t.method="DELETE",yield this.request(t)}))}head(t){return p(this,void 0,void 0,(function*(){return t.method="HEAD",yield this.request(t)}))}}const j=/^\/*(.+?)\/*$/;function A(...t){const e=[];for(const r of t){const t=r.match(j);t&&2===t.length&&e.push(t[1])}return e.join("/")}var E=r(46),S=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))},O=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t="function"==typeof __values?__values(t):t[Symbol.iterator](),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(r){e[r]=t[r]&&function(e){return new Promise((function(n,o){(function(t,e,r,n){Promise.resolve(n).then((function(e){t({value:e,done:r})}),e)})(n,o,(e=t[r](e)).done,e.value)}))}}};class P{constructor(t,e){this.projectID="",this.client=e.child({baseURL:t})}}function R(t){const e=new URL(t);return`${e.protocol}//${e.host}`}P.type="";class T{constructor(t,e){this.pageOpts=t,this.client=e,this.firstIteration=!0}[Symbol.asyncIterator](){return this}next(){return S(this,void 0,void 0,(function*(){if(!this.pageOpts.url)return{value:void 0,done:!0};const t=yield this.client.get(this.pageOpts);return this.pageOpts.url=t.data.next,this.firstIteration&&(this.pageOpts.params=void 0,this.firstIteration=!1),{value:t.data}}))}all(){var t,e;return S(this,void 0,void 0,(function*(){let r=void 0,n=0;try{for(var o,i=O(this);!(o=yield i.next()).done;){const t=o.value;n++,r=this.mergeTwoPages(r,t)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=i.return)&&(yield e.call(i))}finally{if(t)throw t.error}}if(!r)throw Error("Failed to get merged pages");return console.log(`Loaded ${n} pages`),r}))}mergeTwoPages(t,e){if(!e){if(!t)throw Error("No pages to merge");return t}if(!t)return u()(e);for(const r in t){if(!t.hasOwnProperty(r)||!e.hasOwnProperty(r))continue;const n=t[r],o=e[r];n instanceof Array&&o instanceof Array&&(t[r]=n.concat(...o))}return t}}function I(t){return new Promise(e=>setTimeout(e,t))}function U(t,e){return S(this,void 0,void 0,(function*(){const r=Date.now()+1e3*e;let n=1e3;for(;r>Date.now();){if(yield t())return;yield I(n),n<4e4&&(n+=n)}throw Error(`Timeout (${e}s) reached waiting for condition ${t}`)}))}function k(t,e){return S(this,void 0,void 0,(function*(){const r=Date.now()+1e3*e;let n=0;for(;r>Date.now();){yield I(n);try{yield t()}catch(t){if(t instanceof y&&404===t.statusCode)return;throw t}n+=1e3}throw Error(`Timeout (${e}s) reached waiting for resource to be unavailable`)}))}var B=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};var C=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};class $ extends P{constructor(t,e){super(t,e)}listKeyPairs(){return C(this,void 0,void 0,(function*(){return yield function(t){return B(this,void 0,void 0,(function*(){return(yield t.get({url:"/os-keypairs"})).data.keypairs.map(t=>t.keypair)}))}(this.client)}))}}$.type="compute";var D=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};var L=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const N=/([\w-]+\d+)\((\w+)\)/;class M extends P{constructor(t,e){super(t,e)}listFlavors(t){return L(this,void 0,void 0,(function*(){const e=yield function(t,e){return D(this,void 0,void 0,(function*(){const r=e?{availability_zone:e}:void 0;return(yield t.get({url:"/cloudservers/flavors",params:r})).data.flavors}))}(this.client,t);return t?e.filter(e=>e.os_extra_specs["cond:operation:az"].split(",").find(e=>{const r=e.match(N);return!!r&&3===r.length&&r[1]===t&&"normal"===r[2]})):e}))}}M.type="ecs";var F=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};function q(t,e,r){return F(this,void 0,void 0,(function*(){const n=r?{nocatalog:"nocatalog"}:void 0,o=function(t){if(!t.password)throw"Password has to be provided";const e={identity:{methods:["password"],password:{user:{name:t.username,password:t.password,domain:{name:t.domain_name,id:t.domain_id}}}},scope:{}};return t.project_name||t.project_id?e.scope={project:{id:t.project_id,name:t.project_name}}:e.scope={domain:{id:t.domain_id,name:t.domain_name}},{auth:e}}(e),i=yield t.post({url:"/v3/auth/tokens",json:o,params:n}).catch(t=>{throw console.log(JSON.stringify(t)),t}),s=i.data.token,a=i.headers.get("X-Subject-Token");if(!a)throw"No tokenID provided as X-Subject-Token";return Object.assign({id:a},s)}))}function z(t,e,r){return F(this,void 0,void 0,(function*(){const n=r?{nocatalog:"nocatalog"}:void 0,o=yield t.get({url:"/v3/auth/tokens",headers:{"X-Subject-Token":e},params:n});return Object.assign({id:e},o.data.token)}))}var H=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};function Y(t,e,r){return H(this,void 0,void 0,(function*(){const n={user_id:e,description:r},o=yield t.post({url:"/v3.0/OS-CREDENTIAL/credentials",json:n});if(!o.ok)throw"Failed to create AK/SK";return o.data}))}var V=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};var K=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};function X(t){return K(this,void 0,void 0,(function*(){return(yield t.get({url:"/v3/endpoints"})).data.endpoints}))}var G=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};function W(t){return G(this,void 0,void 0,(function*(){return(yield t.get({url:"/v3/services"})).data.services}))}var J=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};class Q extends P{constructor(t,e){super(R(t),e)}issueToken(t,e){return J(this,void 0,void 0,(function*(){return yield q(this.client,t,e)}))}verifyToken(t,e){return J(this,void 0,void 0,(function*(){return yield z(this.client,t,e)}))}getAKSK(t,e){return J(this,void 0,void 0,(function*(){return yield Y(this.client,t,e)}))}listProjects(t){return J(this,void 0,void 0,(function*(){return yield function(t,e){return V(this,void 0,void 0,(function*(){return(yield t.get({url:"/v3/projects",params:e})).data.projects}))}(this.client,t)}))}}function Z(t){return t?`${t.operator}:${s(t.date)}`:t}function tt(t,e){const r=function(t){if(t)return{protected:t.protected,visibility:t.visibility,owner:t.owner,id:t.id,status:t.status,container_format:t.container_format,disk_format:t.disk_format,min_ram:t.min_ram,min_disk:t.min_disk,tag:t.tag,member_status:t.member_status,__os_type:t.os_type,__os_bit:t.os_bit,__platform:t.platform,__support_kvm:t.support_kvm,__support_xen:t.support_xen,__support_largememory:t.support_largememory,__support_diskintensive:t.support_diskintensive,__support_highperformance:t.support_highperformance,__support_xen_gpu_type:t.support_xen_gpu_type,__support_kvm_gpu_type:t.support_kvm_gpu_type,__support_xen_hana:t.support_xen_hana,__support_kvm_infiniband:t.support_kvm_infiniband,created_at:Z(t.created_at),updated_at:Z(t.updated_at)}}(e);return new T({url:"/v2/images",params:r},t)}Q.type="identity";class et extends P{constructor(t,e){super(R(t),e)}listImages(t){return tt(this.client,t||{})}}et.type="image";var rt=r(16),nt=r.n(rt),ot=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};var it=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};var st=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const at=/^[\w\d.\-]{1,64}$/;var ut=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};var ct=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};class ft extends P{constructor(t,e){super(t,e)}listVPCs(){return ct(this,void 0,void 0,(function*(){return yield function(t){return ot(this,void 0,void 0,(function*(){return(yield t.get({url:"/vpcs"})).data.vpcs}))}(this.client)}))}createVPC(t){return ct(this,void 0,void 0,(function*(){const{id:e}=yield function(t,e){return ot(this,void 0,void 0,(function*(){if(e.cidr&&!nt()(e.cidr))throw Error("Invalid CIDR: "+e.cidr);return(yield t.post({url:"/vpcs",json:{vpc:e}})).data.vpc}))}(this.client,t);let r=yield this.getVPC(e);const n=()=>ct(this,void 0,void 0,(function*(){return r=yield this.getVPC(e),"OK"===r.status}));return(yield n())||(yield U(n,60)),r}))}getVPC(t){return ct(this,void 0,void 0,(function*(){return yield function(t,e){return ot(this,void 0,void 0,(function*(){return(yield t.get({url:A("/vpcs",e)})).data.vpc}))}(this.client,t)}))}updateVPC(t,e){return ct(this,void 0,void 0,(function*(){return yield function(t,e,r){return ot(this,void 0,void 0,(function*(){return(yield t.put({url:A("/vpcs",e),json:{vpc:r}})).data.vpc}))}(this.client,t,e)}))}deleteVPC(t){return ct(this,void 0,void 0,(function*(){try{yield function(t,e){return ot(this,void 0,void 0,(function*(){yield t.delete({url:A("/vpcs",e)})}))}(this.client,t)}catch(t){if(t instanceof y&&404===t.statusCode)return;throw t}yield k(()=>this.getVPC(t),60)}))}listSubnets(t){return ct(this,void 0,void 0,(function*(){return yield function(t,e){return it(this,void 0,void 0,(function*(){let r={};e&&(r={vpc_id:e});return(yield t.get({url:"/subnets",params:r})).data.subnets}))}(this.client,t)}))}getSubnet(t){return ct(this,void 0,void 0,(function*(){return yield function(t,e){return it(this,void 0,void 0,(function*(){return(yield t.get({url:A("/subnets",e)})).data.subnet}))}(this.client,t)}))}createSubnet(t){return ct(this,void 0,void 0,(function*(){const{id:e}=yield function(t,e){return it(this,void 0,void 0,(function*(){if(e.cidr&&!nt()(e.cidr))throw Error("Invalid CIDR: "+e.cidr);return(yield t.post({url:"/subnets",json:{subnet:e}})).data.subnet}))}(this.client,t);let r=yield this.getSubnet(e);const n=()=>ct(this,void 0,void 0,(function*(){return r=yield this.getSubnet(e),"ACTIVE"===r.status}));return(yield n())||(yield U(n,120)),r}))}deleteSubnet(t,e){return ct(this,void 0,void 0,(function*(){if(!e){const r=yield this.getSubnet(t);e=r.vpc_id}yield function(t,e,r){return it(this,void 0,void 0,(function*(){const n=A("/vpcs",e,"/subnets",r);yield t.delete({url:n})}))}(this.client,e,t),yield k(()=>this.getSubnet(t),120)}))}listSecurityGroups(t){return ct(this,void 0,void 0,(function*(){return t||(t={}),function(t,e){return st(this,void 0,void 0,(function*(){return(yield t.get({url:"/security-groups",params:e})).data.security_groups}))}(this.client,t)}))}createSecurityGroup(t){return ct(this,void 0,void 0,(function*(){return function(t,e){return st(this,void 0,void 0,(function*(){if(!e.name.match(at))throw Error(`Invalid Security Group name: "${e.name}".\nThe value should be a string of 1 to 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).`);return(yield t.post({url:"/security-groups",json:{security_group:e}})).data.security_group}))}(this.client,t)}))}deleteSecurityGroup(t){return ct(this,void 0,void 0,(function*(){return function(t,e){return st(this,void 0,void 0,(function*(){yield t.delete({url:A("/security-groups",e)})}))}(this.client,t)}))}listPublicIPs(){return ct(this,void 0,void 0,(function*(){return function(t){return ut(this,void 0,void 0,(function*(){return(yield t.get({url:"publicips"})).data.publicips}))}(this.client)}))}}ft.type="vpc";var ht=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const lt="X-Container-Meta-".toLowerCase();function pt(t,e){const r={};let n=0,o=0,i=void 0;return e.forEach((t,e)=>{if(e.startsWith(lt)){const n=e.replace(lt,"");r[n]=t}else switch(e.toLowerCase()){case"x-container-object-count":return void(n=Number.parseInt(t));case"x-container-bytes-used":return void(o=Number.parseInt(t));case"x-timestamp":return void(i=Number.parseFloat(t))}}),{bytes:o,count:n,created:i,name:t,metadata:r}}var dt=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const yt="X-Account-Meta-".toLowerCase();function vt(t){const e={};let r=0,n=0,o=0,i="";return t.forEach((t,s)=>{if(s.startsWith(yt)){const r=s.replace(yt,"");e[r]=t}else switch(s.toLowerCase()){case"x-account-object-count":return void(o=Number.parseInt(t));case"x-account-container-count":return void(n=Number.parseInt(t));case"x-account-bytes-used":return void(r=Number.parseInt(t));case"x-account-project-domain-id":return void(i=t)}}),{domainID:i,bytesUsed:r,containerCount:n,metadata:e,objectCount:o}}var gt=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};class bt extends P{constructor(t,e){super(t,e)}getAccount(){return gt(this,void 0,void 0,(function*(){return yield function(t){return dt(this,void 0,void 0,(function*(){const e=yield t.get({url:"",params:{format:"json"}}),r=vt(e.headers);return Object.assign({containers:e.data},r)}))}(this.client)}))}showAccountMetadata(){return gt(this,void 0,void 0,(function*(){return yield function(t){return dt(this,void 0,void 0,(function*(){return vt((yield t.head({url:""})).headers)}))}(this.client)}))}updateAccountMetadata(t,e){return gt(this,void 0,void 0,(function*(){return yield function(t,e,r){return dt(this,void 0,void 0,(function*(){const n=new Headers;if(e)for(const[t,r]of Object.entries(e))n.append(yt+t,r);if(null!=r){if(!Number.isInteger(r)||r>0x8000000000000000)throw Error("Invalid quota value: "+r);r<0?n.append("X-Remove-AccountMetadata-Meta-Quota-Bytes","yes"):n.append("X-AccountMetadata-Meta-Quota-Bytes",r.toString())}yield t.post({url:"",headers:n})}))}(this.client,t,e)}))}createContainer(t,e,r){return gt(this,void 0,void 0,(function*(){yield function(t,e,r,n){return ht(this,void 0,void 0,(function*(){const o=new Headers;if(r&&(r.read&&o.append("X-ContainerMetadata-Read",r.read),r.write&&o.append("X-ContainerMetadata-Write",r.write)),n)for(const[t,e]of Object.entries(n))o.append("X-Container-Meta-"+t,e);yield t.put({url:A("",e),headers:o})}))}(this.client,t,e,r)}))}listContainers(){return gt(this,void 0,void 0,(function*(){return(yield this.getAccount()).containers}))}showContainerMetadata(t){return gt(this,void 0,void 0,(function*(){return yield function(t,e){return ht(this,void 0,void 0,(function*(){const r=yield t.head({url:A("",e)});return pt(e,r.headers)}))}(this.client,t)}))}getContainer(t,e){return gt(this,void 0,void 0,(function*(){return yield function(t,e,r){return ht(this,void 0,void 0,(function*(){const n=yield t.get({url:A("",e),params:r});return Object.assign(Object.assign({},pt(e,n.headers)),n.data)}))}(this.client,t,e)}))}deleteContainer(t){return gt(this,void 0,void 0,(function*(){return yield function(t,e){return ht(this,void 0,void 0,(function*(){yield t.delete({url:A("",e)})}))}(this.client,t)}))}}bt.type="object-store";var mt=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{u(n.next(t))}catch(t){i(t)}}function a(t){try{u(n.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};class wt{constructor(t){this.serviceMap=new Map,this.cloud=t,t.region||(t.region="eu-de",t.auth.project_name&&(t.region=t.auth.project_name.split("_",1)[0])),this.httpClient=new x({}),this.injectCommonHeaders(),this.registerService("identity",this.cloud.auth.auth_url)}set tokenID(t){this.cloud.auth.token=t}get tokenID(){return this.cloud.auth.token||""}get projectID(){return this.cloud.auth.project_id||""}set projectID(t){this.cloud.auth.project_id=t}get domainID(){return this.cloud.auth.domain_id||""}set domainID(t){this.cloud.auth.domain_id=t}injectCommonHeaders(){this.httpClient.beforeRequest.first=_t}registerService(t,e){this.serviceMap.set(t,e)}getService(t){const e=this.serviceMap.get(t.type);if(!e)throw Error(`Service '${t.type}' is not registered`);const r=new t(e,this.httpClient);return r.projectID=this.projectID,r}getIdentity(){return this.getService(Q)}saveServiceCatalog(t){t.forEach(t=>{const e=t.endpoints.find(t=>(t.region===this.cloud.region||"*"===t.region)&&"public"===t.interface);e&&this.registerService(t.type,e.url)})}authAkSk(){return mt(this,void 0,void 0,(function*(){this.httpClient.beforeRequest.last=t=>{if(!this.cloud.auth.ak||!this.cloud.auth.sk)throw Error("Missing AK/SK: "+JSON.stringify(this.cloud.auth));""!==this.projectID&&t.headers.set("X-Project-Id",this.projectID),""!==this.domainID&&t.headers.set("X-Domain-Id",this.domainID);const e=new URL(t.url),r=Object(E.a)({accessKeyId:this.cloud.auth.ak,secretAccessKey:this.cloud.auth.sk,regionName:""},{method:t.method,url:e,serviceName:"",headers:t.headers});return r&&(t.headers.set("X-Sdk-Date",r["X-Sdk-Date"]),t.headers.set("Authorization",r.Authorization)),t};const t=this.cloud.auth.project_name;if(!this.projectID&&t){const e=this.getIdentity(),r=yield e.listProjects({name:t});if(!r.length)throw Error(`Project with name ${t} doesn't exist`);this.projectID=r[0].id,this.domainID=r[0].domain_id}}))}injectAuthToken(){this.httpClient.beforeRequest.push(t=>(this.tokenID&&t.headers.set("X-Auth-Token",this.tokenID),t))}authToken(){return mt(this,void 0,void 0,(function*(){this.injectAuthToken();const t=this.getIdentity();let e;if(this.tokenID?e=yield t.verifyToken(this.tokenID):(e=yield t.issueToken(this.cloud.auth),this.tokenID=e.id),e.project&&(this.projectID=e.project.id),this.domainID=e.user.domain.id,!e.catalog)throw Error("No service catalog provided");this.saveServiceCatalog(e.catalog)}))}authenticate(){return mt(this,void 0,void 0,(function*(){if(f()(this.cloud.auth))throw new Error("Missing auth options");this.cloud.auth.ak&&this.cloud.auth.sk?yield this.authAkSk():yield this.authToken()}))}}function _t(t){t.headers.append("User-Agent","OpenTelekomCloud JS/v1.0"),t.headers.append("Accept","application/json"),t.headers.append("Content-Type","application/json");const e=t.baseURL||t.url||"";return e&&t.headers.append("Host",new URL(e).host),t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,